  # 열순서변경 
DT1 <- DT1[ ,c(6,7,1,2,3,4,8,5)] 

# 열삭제

#  해당하는 것 추출  
n_date <- unique(energy_3[, date])
#training data <- 3주치 data(504개)
data_train <- energy_3[date %in% n_date1[7:27]]


#  특정 열을 찾아서 이름을 변경하는 방법

 names(ac)[names(ac)=="Time"] <- c("newTime")

 names(ac)

[1] "newTime" "Power"  

출처: http://goodtogreate.tistory.com/entry/데이터구조 [GOOD to GREAT]

#특정 칼럼 값 변경
data$col1[data$col1=col속성] <- 변경값
energy_3$wday1[energy_3$wday1==1] <- "Sun"


#paste
paste("Everybody", "loves", "stats.", sep="-")

#저장
fwrite(energy_2, "final1.csv")


##ggplot 분할
# gridExtra 패키지 안에 있는 grid.arrage() 함수를 이용하여 화면 분할
library(gridExtra)

p1 = ggplot(diamonds, aes(x=cut, y=price)) + geom_bar()
p2 = ggplot(diamonds, aes(x=color, y=price)) + geom_bar()

 
# 1행 2열로 화면 분할함
grid.arrange(p1, p2, ncol=2)

# y축 직선 긋기
ggplot(the.data, aes( year, value ) ) +  
    geom_hline(yintercept = 50) 
    
    
#시계열 data변환 
#주기 2개- 한시간 단위 측정일 경우 하루24, 일주일168(24*7)
ts.train<-msts(data_train$hour_ave, seasonal.periods=c(48,336))
#주기 1개
data_ts <- ts(data_train$value, freq = period)

#rep
#각각 두번씩
rep(1:5, each=2)
 1 1 2 2 3 3 4 4 5 5
#두번 반복
rep(1:5, 2)
 1 2 3 4 5 1 2 3 4 5
rep(c("Real", "RPART"), each = length(matrix_train$Load))

#seq
#시작/끝/by간격, length.out-시작과 끝을 몇개로 나누는지

> seq(1,10, by=2)
[1] 1 3 5 7 9
> seq(1,10, length.out=3)
[1]  1.0  5.5 10.0

#apply(x,margin,func, ...)

• x: array
• margin: subscripts, for matrix, 1 for row, 2 for column
• func: the function

> apply(BOD,2,sum)



#expand.grid
#expand.grid() function creates a data frame from all combinations of the supplied vectors or factors.
subtype <- c("green","red","yellow")
sex <- c("M","F")
expand.grid(subtype, sex)


> subtype <- c("green","red","yellow")
> sex <- c("M","F")
> expand.grid(subtype, sex)
Var1 Var2
1  green    M
2    red    M
3 yellow    M
4  green    F
5    red    F
6 yellow    F

#ifelse문
pred_day$type<-ifelse(pred_day$y_obs > pred_day$upr,"exceed upper bend"," within bend")

#data.table 형성
  gg<-data.table(y_obs = data_test1$hour_ave,
                 pred_t = predict(model_t, newdata = data_test1),
                 date_time=data_test$date_time,
                 date=data_test$date)
 # 여러개 합칠때                
 datas <- data.table(value = c(aa, bb),
                    type = )
 
  
  
  #ggplot 형식
    theme_bw() +
  theme(plot.title = element_text(size = 16, face = "bold",color = "black"), #제목
        axis.text = element_text(size = 10, face = "bold",color = "black"),  #축글자
        axis.title = element_text(size = 13, face = "bold"),                 #축제목
        legend.background = element_rect(color = "grey50"),                  #범례 나눠질때
        legend.text = element_text(size = 10, face = "bold"),
        legend.title = element_text(size = 10, face = "bold")) +
  scale_color_brewer(palette = "Set1") #범례 나눠질때 색변경
  
  
    scale_x_discrete(limits=c("Mon","Tue","Wed","Thr","Fri","Sat","Sun") #x축 순서변경
  ggsave(filename = 'p5.png', p) #저장
  
  수직선추가
    geom_vline(xintercept = 0)
  
  
  # 불러오기
  final_data <- fread("final_data_1.csv")
  
  
  #gganimate
  #frame:기준 / cumulative 누적적으로 그래프 쌓이게
  p<-ggplot(data = comparison1, aes(date_time, y_obs, color = type, frame=date_time,  cumulative = TRUE)) +
  geom_line(size = 1.5)
  gganimate(p, interval = 0.2,"output.gif")
  
  
  # 열삭제
practice<- final_data %>% 
  select(-date, -V24)

# 열의 요소들 비율
table(final_data$holiday)
prop.table(table(final_data$holiday))

# missing value 확인
any(is.na(final_data))

# y값 추출
df_y <- final_data$hour_ave

#내림차순 정렬
practice <- final_data %>% 
  arrange(desc(final_data$temp))


# training and test datasets 만들기
set.seed(100)

# Step 1: Get row numbers for the training data

trainRowNumbers <- createDataPartition(orange$Purchase, p=0.8, list=FALSE)

# Step 2: Create the training  dataset
trainData <- orange[trainRowNumbers,]

# Step 3: Create the test dataset
testData <- orange[-trainRowNumbers,]

# Store X and Y for later use.
x <- trainData[, 2:18]
y <- trainData$Purchase


#temp <- cast(usage_hour_weekday, usage_hour ~ usage_weekday, value = "usage_mean")
행~열 , value= 값



# 원래있던 col에서 속성 값 변경하기
recode

example
    city cold is_cold
1 Boston    y     yes
2    NYC    y     yes
3     LA    n      no



df %>%
    mutate(is_cold = recode(cold, 

                            y, 
                            n))

                            y = "yes", 
                            n = "no"))

